# app.py
import streamlit as st
import pandas as pd
import os
from pathlib import Path
from languages import LANGUAGES, get_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Food.com - Recipes Database",
    page_icon="üç≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞
    if 'language' not in st.session_state:
        st.session_state.language = "en"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if 'first_visit' not in st.session_state:
        show_welcome_page()
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    run_main_app()

def show_welcome_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    st.title("üç≥ Welcome to Food.com Recipes Explorer!")
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    lang_option = st.radio(
        "Please select your language / Pros√≠m vyberte v√°≈° jazyk / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:",
        ["English", "Slovensky", "–†—É—Å—Å–∫–∏–π"]
    )
    
    lang_map = {"English": "en", "Slovensky": "sk", "–†—É—Å—Å–∫–∏–π": "ru"}
    selected_lang = lang_map[lang_option]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    st.header("üìñ About this application" if selected_lang == "en" else 
              "üìñ O tejto aplik√°cii" if selected_lang == "sk" else 
              "üìñ –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    welcome_texts = {
        "en": """
        **Food.com Recipes Explorer** is an interactive web application that allows you to explore:
        
        üçΩÔ∏è **Recipe Collection** - Browse 230,000+ recipes with ingredients and cooking steps
        üí¨ **User Reviews** - Read 1,000,000+ reviews and ratings  
        üìä **Data Analysis** - Analyze dataset structure and statistics
        
        **Main Features:**
        - Search recipes by name, cooking time, and ingredients
        - Read user reviews with ratings
        - View nutritional information
        - Multi-language interface
        
        **Data Source:** [Food.com Recipes and Interactions](https://www.kaggle.com/datasets/shuyangli94/food-com-recipes-and-user-interactions)
        
        To get started, make sure you have the CSV files in the application folder and click the button below!
        """,
        "sk": """
        **Food.com Recipes Explorer** je interakt√≠vna webov√° aplik√°cia, ktor√° v√°m umo≈æ≈àuje presk√∫ma≈•:
        
        üçΩÔ∏è **Zbierku receptov** - Prehliadajte 230 000+ receptov s ingredienciami a krokmi varenia
        üí¨ **Recenzie pou≈æ√≠vateƒæov** - ƒå√≠tajte 1 000 000+ recenzi√≠ a hodnoten√≠
        üìä **Anal√Ωzu d√°t** - Analyzujte ≈°trukt√∫ru d√°tov√Ωch s√∫borov a ≈°tatistiky
        
        **Hlavn√© funkcie:**
        - Hƒæadanie receptov podƒæa n√°zvu, ƒçasu varenia a ingredienci√≠
        - ƒå√≠tanie recenzi√≠ pou≈æ√≠vateƒæov s hodnoteniami
        - Zobrazenie v√Ω≈æivov√Ωch inform√°ci√≠
        - Viacjazyƒçn√© rozhranie
        
        **Zdroj d√°t:** [Food.com Recipes and Interactions](https://www.kaggle.com/datasets/shuyangli94/food-com-recipes-and-user-interactions)
        
        Ak chcete zaƒça≈•, uistite sa, ≈æe m√°te CSV s√∫bory v prieƒçinku aplik√°cie a kliknite na tlaƒçidlo ni≈æ≈°ie!
        """,
        "ru": """
        **Food.com Recipes Explorer** - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å:
        
        üçΩÔ∏è **–ö–æ–ª–ª–µ–∫—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤** - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ 230 000+ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ —à–∞–≥–∞–º–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        üí¨ **–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** - –ß–∏—Ç–∞–π—Ç–µ 1 000 000+ –æ—Ç–∑—ã–≤–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫
        üìä **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö** - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É datasets –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
        - –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
        - –ß—Ç–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** [Food.com Recipes and Interactions](https://www.kaggle.com/datasets/shuyangli94/food-com-recipes-and-user-interactions)
        
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ CSV —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!
        """
    }
    
    st.markdown(welcome_texts[selected_lang])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    if st.button("Get Started / Zaƒça≈• / –ù–∞—á–∞—Ç—å" if selected_lang == "en" else
                 "Zaƒça≈•" if selected_lang == "sk" else "–ù–∞—á–∞—Ç—å"):
        st.session_state.first_visit = True
        st.session_state.language = selected_lang
        st.rerun()

def run_main_app():
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    lang = st.session_state.language
    t = lambda key: get_text(lang, key)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title(t("app_title"))
    st.markdown(t("app_subtitle"))
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É
    col1, col2, col3 = st.columns([3, 1, 1])
    with col3:
        new_lang = st.selectbox(
            "üåê Language / Jazyk / –Ø–∑—ã–∫",
            ["en", "sk", "ru"],
            index=["en", "sk", "ru"].index(lang),
            format_func=lambda x: LANGUAGES[x]["language_name"]
        )
        if new_lang != lang:
            st.session_state.language = new_lang
            st.rerun()
    
    # –ü–æ–∏—Å–∫ CSV —Ñ–∞–π–ª–æ–≤
    csv_files = find_csv_files()
    
    if not csv_files:
        st.error(t("file_not_found"))
        st.info(t("file_instructions"))
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    render_app(csv_files, t)

def find_csv_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ CSV —Ñ–∞–π–ª—ã"""
    csv_files = {}
    for file in Path(".").glob("*.csv"):
        csv_files[file.name] = str(file)
    
    data_dir = Path("data")
    if data_dir.exists():
        for file in data_dir.glob("*.csv"):
            csv_files[file.name] = str(file)
    
    return csv_files

def render_app(csv_files, t):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        render_sidebar(csv_files, t)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    render_main_content(t)

def render_sidebar(csv_files, t):
    """–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    st.header(t("navigation"))
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    app_mode = st.radio(
        t("view_mode"),
        t("view_modes"),
        index=0
    )
    
    st.session_state.app_mode = app_mode
    
    st.header(t("data_selection"))
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    priority_files = {
        "RAW_recipes.csv": "üìñ " + ("Recipes" if t("language_name") == "English" else "Recepty" if t("language_name") == "Slovensky" else "–†–µ—Ü–µ–ø—Ç—ã"),
        "RAW_interactions.csv": "üí¨ " + ("Reviews" if t("language_name") == "English" else "Recenzie" if t("language_name") == "Slovensky" else "–û—Ç–∑—ã–≤—ã"), 
    }
    
    available_priority_files = {k: v for k, v in priority_files.items() if k in csv_files}
    
    if available_priority_files:
        selected_file = st.selectbox(
            t("select_data"),
            list(available_priority_files.keys()),
            format_func=lambda x: available_priority_files[x]
        )
        st.session_state.selected_file = csv_files[selected_file]
        st.session_state.selected_file_name = selected_file
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.header(t("about_data"))
    st.info(t("data_info"))

def render_main_content(t):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
    if not hasattr(st.session_state, 'app_mode'):
        return
    
    if st.session_state.app_mode == t("view_modes")[0]:  # Recipes
        show_recipes_mode(t)
    elif st.session_state.app_mode == t("view_modes")[1]:  # Reviews
        show_reviews_mode(t)
    else:  # Analysis
        show_analysis_mode(t)

def show_recipes_mode(t):
    """–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    st.header(t("recipes_title"))
    
    if not hasattr(st.session_state, 'selected_file'):
        st.warning(t("select_file_sidebar"))
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data(st.session_state.selected_file)
    if df is None:
        return
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    st.subheader(t("search_recipes"))
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_name = st.text_input(t("recipe_name"), placeholder=t("name_placeholder"))
    
    with col2:
        max_time = st.number_input(t("max_time"), min_value=0, max_value=1000, value=120)
    
    with col3:
        max_ingredients = st.number_input(t("max_ingredients"), min_value=1, max_value=50, value=15)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()
    
    if search_name:
        filtered_df = filtered_df[filtered_df['name'].str.contains(search_name, case=False, na=False)]
    
    if 'minutes' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['minutes'] <= max_time]
    
    if 'n_ingredients' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['n_ingredients'] <= max_ingredients]
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader(f"{t('found_recipes')} {len(filtered_df)}")
    
    if len(filtered_df) == 0:
        st.info(t("no_recipes"))
        return
    
    # –ü–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    for idx, recipe in filtered_df.head(20).iterrows():
        with st.expander(f"üç≥ {recipe.get('name', 'No name')}", expanded=False):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                if 'minutes' in recipe:
                    st.write(f"**{t('cooking_time')}** {recipe['minutes']} " + ("minutes" if t("language_name") == "English" else "min√∫t" if t("language_name") == "Slovensky" else "–º–∏–Ω—É—Ç"))
                
                if 'n_ingredients' in recipe:
                    st.write(f"**{t('ingredients_count')}** {recipe['n_ingredients']}")
                
                if 'n_steps' in recipe:
                    st.write(f"**{t('steps_count')}** {recipe['n_steps']}")
                
                # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                if 'ingredients' in recipe and pd.notna(recipe['ingredients']):
                    st.subheader(t("ingredients_title"))
                    try:
                        ingredients = eval(recipe['ingredients']) if isinstance(recipe['ingredients'], str) else recipe['ingredients']
                        for ing in ingredients[:10]:
                            st.write(f"- {ing}")
                        if len(ingredients) > 10:
                            st.write(f"... " + ("and" if t("language_name") == "English" else "a" if t("language_name") == "Slovensky" else "–∏") + f" {len(ingredients) - 10} " + ("more ingredients" if t("language_name") == "English" else "ƒèal≈°√≠ch ingredienci√≠" if t("language_name") == "Slovensky" else "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"))
                    except:
                        st.write("Unable to read ingredients" if t("language_name") == "English" else "Nepodarilo sa preƒç√≠ta≈• ingrediencie" if t("language_name") == "Slovensky" else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")
            
            with col2:
                if 'nutrition' in recipe and pd.notna(recipe['nutrition']):
                    st.subheader(t("nutrition_title"))
                    try:
                        nutrition = eval(recipe['nutrition']) if isinstance(recipe['nutrition'], str) else recipe['nutrition']
                        nutrients = [
                            t('calories') if 'calories' in t else 'Calories', 
                            t('fat') if 'fat' in t else 'Fat',
                            t('sugar') if 'sugar' in t else 'Sugar', 
                            t('sodium') if 'sodium' in t else 'Sodium',
                            t('protein') if 'protein' in t else 'Protein',
                            t('saturated_fat') if 'saturated_fat' in t else 'Saturated fat'
                        ]
                        if len(nutrition) >= 6:
                            for i, (nutrient, value) in enumerate(zip(nutrients, nutrition[:6])):
                                st.write(f"{nutrient}: {value}")
                    except:
                        st.write("Unable to read nutrition" if t("language_name") == "English" else "Nepodarilo sa preƒç√≠ta≈• v√Ω≈æivov√© hodnoty" if t("language_name") == "Slovensky" else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å")
            
            # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            if 'steps' in recipe and pd.notna(recipe['steps']):
                st.subheader(t("cooking_steps"))
                try:
                    steps = eval(recipe['steps']) if isinstance(recipe['steps'], str) else recipe['steps']
                    for i, step in enumerate(steps[:5], 1):
                        st.write(f"{i}. {step}")
                    if len(steps) > 5:
                        st.write(f"... " + ("and" if t("language_name") == "English" else "a" if t("language_name") == "Slovensky" else "–∏") + f" {len(steps) - 5} " + ("more steps" if t("language_name") == "English" else "ƒèal≈°√≠ch krokov" if t("language_name") == "Slovensky" else "—à–∞–≥–æ–≤"))
                except:
                    st.write("Unable to read cooking steps" if t("language_name") == "English" else "Nepodarilo sa preƒç√≠ta≈• kroky varenia" if t("language_name") == "Slovensky" else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
            
            # –¢–µ–≥–∏
            if 'tags' in recipe and pd.notna(recipe['tags']):
                try:
                    tags = eval(recipe['tags']) if isinstance(recipe['tags'], str) else recipe['tags']
                    if tags:
                        st.write(f"**{t('tags')}**", ", ".join(tags[:8]))
                except:
                    pass

def show_reviews_mode(t):
    """–†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
    st.header(t("reviews_title"))
    
    if not hasattr(st.session_state, 'selected_file'):
        st.warning(t("select_reviews_sidebar"))
        return
    
    df = load_data(st.session_state.selected_file)
    if df is None:
        return
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    st.subheader(t("filters"))
    
    col1, col2 = st.columns(2)
    
    with col1:
        min_rating = st.slider(t("min_rating"), 1, 5, 3)
    
    with col2:
        review_count = st.slider(t("reviews_count"), 1, 50, 10)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()
    
    if 'rating' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['rating'] >= min_rating]
    
    # –ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤
    st.subheader(t("latest_reviews").format(min_rating))
    
    for idx, review in filtered_df.head(review_count).iterrows():
        rating_emoji = "‚≠ê" * int(review.get('rating', 0))
        
        with st.container():
            st.markdown(f"### {rating_emoji} {t('rating')} {review.get('rating', 'N/A')}")
            
            if 'review' in review and pd.notna(review['review']):
                st.write(review['review'])
            else:
                st.write(t("no_review_text"))
            
            col1, col2 = st.columns(2)
            with col1:
                if 'date' in review:
                    st.caption(f"{t('date')} {review['date']}")
            with col2:
                if 'user_id' in review:
                    st.caption(f"{t('user')} {review['user_id']}")
            
            st.divider()

def show_analysis_mode(t):
    """–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header(t("analysis_title"))
    
    if not hasattr(st.session_state, 'selected_file'):
        st.warning(t("select_analysis_sidebar"))
        return
    
    df = load_data(st.session_state.selected_file)
    if df is None:
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(t("total_records"), df.shape[0])
    with col2:
        st.metric(t("columns"), df.shape[1])
    with col3:
        st.metric(t("data_size"), f"{df.memory_usage(deep=True).sum() / 1024**2:.1f} MB")
    with col4:
        st.metric(t("duplicates"), df.duplicated().sum())
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
    st.subheader(t("data_structure"))
    
    col_info = pd.DataFrame({
        t('column'): df.columns,
        t('data_type'): df.dtypes,
        t('completeness'): (df.count() / len(df) * 100).round(1).astype(str) + '%',
        t('unique'): df.nunique()
    })
    
    st.dataframe(col_info, use_container_width=True, hide_index=True)
    
    # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
    st.subheader(t("data_preview"))
    st.dataframe(df.head(10), use_container_width=True)

def load_data(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        return pd.read_csv(file_path)
    except Exception as e:
        st.error(f"‚ùå Error loading data: {e}" if st.session_state.language == "en" else 
                 f"‚ùå Chyba pri naƒç√≠tan√≠ d√°t: {e}" if st.session_state.language == "sk" else
                 f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

if __name__ == "__main__":
    main()